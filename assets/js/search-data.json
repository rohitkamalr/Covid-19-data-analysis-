{
  
    
        "post0": {
            "title": "Second wave analysis",
            "content": "Covid-19 Matplotlib Overview in India . Second wave Analysis (from 20th April 2021) . India . Last update: 2021-10-31 . Confirmed cases: . 34285612 (+12907) . Confirmed deaths: . 458470 (+251) . Analysis of top-10 States in covid cases . states Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate % Cases (+) % Deaths (+) Maharashtra 6611078 140216 6609906 140196 1172 20 2.12 9.08 7.97 Kerala 4968657 31681 4961490 31514 7167 167 0.64 55.53 66.53 Karnataka 2988333 38082 2988041 38071 292 11 1.27 2.26 4.38 Tamil Nadu 2702623 36116 2701614 36097 1009 19 1.34 7.82 7.57 Andhra Pradesh 2066450 14373 2066065 14369 385 4 0.70 2.98 1.59 Uttar Pradesh 1710158 22900 1710152 22900 6 0 1.34 0.05 0.00 West Bengal 1592908 19141 1591994 19126 914 15 1.20 7.08 5.98 Delhi 1439870 25091 1439825 25091 45 0 1.74 0.35 0.00 Odisha 1041457 8386 1040969 8382 488 4 0.81 3.78 1.59 Chhattisgarh 1006052 13577 1006020 13576 32 1 1.35 0.25 0.40 Rajasthan 954429 8954 954427 8954 2 0 0.94 0.02 0.00 Gujarat 826577 10089 826557 10089 20 0 1.22 0.15 0.00 Madhya Pradesh 792854 10524 792838 10524 16 0 1.33 0.12 0.00 Haryana 771252 10049 771241 10049 11 0 1.30 0.09 0.00 Bihar 726098 9661 726090 9661 8 0 1.33 0.06 0.00 Telangana 671463 3956 671342 3955 121 1 0.59 0.94 0.40 Assam 610645 5997 610433 5996 212 1 0.98 1.64 0.40 Punjab 602401 16559 602375 16558 26 1 2.75 0.20 0.40 Jharkhand 348764 5138 348754 5138 10 0 1.47 0.08 0.00 Uttarakhand 343896 7400 343891 7400 5 0 2.15 0.04 0.00 Jammu and Kashmir 332249 4432 332154 4432 95 0 1.33 0.74 0.00 Himachal Pradesh 224106 3738 224021 3737 85 1 1.67 0.66 0.40 Goa 178108 3364 178085 3364 23 0 1.89 0.18 0.00 Puducherry 128013 1857 127975 1857 38 0 1.45 0.29 0.00 Manipur 123731 1921 123668 1920 63 1 1.55 0.49 0.40 Mizoram 121359 432 120780 430 579 2 0.36 4.49 0.80 Tripura 84468 813 84456 813 12 0 0.96 0.09 0.00 Meghalaya 83627 1450 83605 1449 22 1 1.73 0.17 0.40 Chandigarh 65351 820 65346 820 5 0 1.25 0.04 0.00 Arunachal Pradesh 55155 280 55154 280 1 0 0.51 0.01 0.00 Sikkim 31979 396 31958 395 21 1 1.24 0.16 0.40 Nagaland 31842 685 31831 684 11 1 2.15 0.09 0.40 Ladakh 20962 208 20951 208 11 0 0.99 0.09 0.00 Dadra and Nagar Haveli and Daman and Diu 10681 4 10681 4 0 0 0.04 0.00 0.00 Lakshadweep 10365 51 10365 51 0 0 0.49 0.00 0.00 Andaman and Nicobar Islands 7651 129 7651 129 0 0 1.69 0.00 0.00 . Punjab has highest Fatality rate (2.75) . Dadra and Nagar Haveli and Daman and Diu has lowest Fatality rate (0.04) .",
            "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/2022/11/10/Latest.html",
            "relUrl": "/2022/11/10/Latest.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "First wave analysis",
            "content": "Covid-19 Matplotlib Overview in India . First wave Analysis (from 20th May 2020 to 14th November 2020 . India . Last update: 2020-11-14 . Confirmed cases: . 8814937 (+41692) . Confirmed deaths: . 129675 (+450) . Analysis of top-10 States in covid cases . states Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate % Cases (+) % Deaths (+) Maharashtra 1744698 45914 1740461 45809 4237 105 2.63 10.16 23.33 Karnataka 860082 11508 857928 11491 2154 17 1.34 5.17 3.78 Andhra Pradesh 852955 6854 851298 6847 1657 7 0.80 3.97 1.56 Tamil Nadu 756372 11466 754460 11454 1912 12 1.52 4.59 2.67 Kerala 520418 1849 514061 1823 6357 26 0.36 15.25 5.78 Uttar Pradesh 509903 7354 507602 7327 2301 27 1.44 5.52 6.00 Delhi 482170 7519 474830 7423 7340 96 1.56 17.61 21.33 West Bengal 428498 7610 424675 7557 3823 53 1.78 9.17 11.78 Odisha 307906 1563 307004 1548 902 15 0.51 2.16 3.33 Telangana 256713 1401 255663 1397 1050 4 0.55 2.52 0.89 Bihar 226669 1179 226081 1174 588 5 0.52 1.41 1.11 Rajasthan 223633 2056 221471 2044 2162 12 0.92 5.19 2.67 Assam 210175 961 210068 958 107 3 0.46 0.26 0.67 Chhattisgarh 210004 2562 209288 2545 716 17 1.22 1.72 3.78 Haryana 197917 2011 195799 2006 2118 5 1.02 5.08 1.11 Gujarat 187240 3797 186116 3791 1124 6 2.03 2.70 1.33 Madhya Pradesh 183057 3083 182045 3076 1012 7 1.68 2.43 1.56 Punjab 140605 4428 140605 4428 0 0 3.15 0.00 0.00 Jharkhand 105935 922 105781 921 154 1 0.87 0.37 0.22 Jammu and Kashmir 102159 1580 101594 1574 565 6 1.55 1.36 1.33 Uttarakhand 68002 1102 67706 1097 296 5 1.62 0.71 1.11 Goa 45845 659 45761 658 84 1 1.44 0.20 0.22 Puducherry 36299 608 36252 608 47 0 1.67 0.11 0.00 Tripura 31916 359 31838 357 78 2 1.12 0.19 0.44 Himachal Pradesh 29330 424 29008 416 322 8 1.45 0.77 1.78 Manipur 21638 218 21427 213 211 5 1.01 0.51 1.11 Arunachal Pradesh 15792 48 15758 47 34 1 0.30 0.08 0.22 Chandigarh 15636 246 15636 246 0 0 1.57 0.00 0.00 Meghalaya 10633 100 10582 98 51 2 0.94 0.12 0.44 Nagaland 9750 52 9638 52 112 0 0.53 0.27 0.00 Ladakh 7356 89 7291 89 65 0 1.21 0.16 0.00 Andaman and Nicobar Islands 4527 61 4518 61 9 0 1.35 0.02 0.00 Sikkim 4456 87 4415 86 41 1 1.95 0.10 0.22 Mizoram 3368 3 3309 2 59 1 0.09 0.14 0.22 Dadra and Nagar Haveli and Daman and Diu 3280 2 3276 2 4 0 0.06 0.01 0.00 Lakshadweep 0 0 0 0 0 0 NaN 0.00 0.00 . Punjab has highest Fatality rate (3.15) . Dadra and Nagar Haveli and Daman and Diu has lowest Fatality rate (0.06) .",
            "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/2022/11/10/First_wave.html",
            "relUrl": "/2022/11/10/First_wave.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohitkamalr.github.io/Covid-19-data-analysis-/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}